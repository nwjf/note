1. 原型
    在JavaScript中原型是一个prototype对象，用于表示类型之间的关系。

2. 原型链
    JavaScript万物都是对象，对象和对象之间也有关系，并不是孤立存在的。对象之间的继承关系，在JavaScript中是通过prototype对象指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条，专业术语称之为原型链。

3. 作用域
    javascript中的作用域可以理解为一个语句执行的环境大小，有全局的作用域，函数作用域和eval作用域。在JS中没有块级作用域。

4. 数据类型
    六种原始类型 Boolean, Null, Undefined, Number, String, Object, Symbol(符号类型) ////Object

5. 数据结构：列表、栈、队列、链表、字典、散列、图和二叉查找树


    1）列表

    2）栈（先进后出，比如洗盘子）是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。想象一下，我们平常在饭馆见到的一摞盘子就是现实世界常见的栈的例子，只能从最上面取盘子，盘子洗干净后，也只能放在最上面。栈被称为一种后入先出的数据结构。是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样的操作很快。
    
    3）列队(先进先出)  列也是一种列表，不同的是队列只能在队尾插入元素，在队首删除元素。想象一下，我们在银行排队，排在最前面的人第一个办理业务，而后面来的人只能排在队伍的后面，直到轮到他们为止。
    
    4）链表  是由一组节点组成的集合。每一个节点都使用一个对象的引用指向它的后续借点。指向另外一个借点的引用叫做链。
    
    5）散列（也称为哈希表）是一种的常用的数组存储技术，散列后的数组可以快速地插入或取用。散列使用的数据结构叫做散列表。在散列表上插入、删除和取用数据都非常快，但对于查找操作来说却效率低下，比如查找一组数组中的最大值和最小值。这些操作需要求助于其他数据结构，比如下面介绍的二叉查找树。
    
    6）图由边的集合及顶点的集合组成。地图是我们身边很常见的现实场景，比如每两个城镇都由某种道路相连。上面的每个城镇可以看作一个顶点，连接城镇的道路便是边。边由顶点对（v1, v2）定义，v1和v2分别是图中的两个顶点。顶点也有权重，也成为成本。如果一个图的顶点对是有序的，则称之为有向图（例如常见的流程图），反之，称之为无序图。
    使用场景（用图对现实中的系统建模）：

    交通系统，可以用顶点表示街道的十字路口，边可以表示街道。加权的边可以表示限速或者车道的数量。可以用该系统判断最佳路线及最有可能堵车的街道。
    任何运输系统都可以用图来建模。比如，航空公司可以用图来为其飞行系统建模。将每个机场看成顶点，将经过两个顶点的每条航线看作一条边。加权的边可以表示从一个机场到另一个机场的航班成本，或两个机场间的距离，这取决于建模的对象是什么。

    7）树是计算机科学中经常用到的一种数据结构。树是一种非线性的数据结构，以分层的方式存储数据。
    二叉树每个节点的子节点不允许超过两个。一个父节点的两个子节点分别称为左节点和右节点，通过将子节点的个数限定为2，可以写出高效的程序在树中插入、查找和删除数据。
    二叉查找树（BST）是一种特殊的二叉树，相对较小的值保存在左节点中，较大的值保存在右节点中。这一特性使得查找的效率很高，对于数值型和非数值型的数据，比如单词和字符串，都是如此。

6. new发生了什么

    创建一个新的对象，这个对象的类型是object； 
    设置这个新的对象的内部、可访问性和prototype属性为构造函数（指prototype.construtor所指向的构造函数）中设置的； 
    执行构造函数； 
    返回新创建的对象。